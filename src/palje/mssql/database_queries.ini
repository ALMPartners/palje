[Queries]
database_names = SELECT Name as database_name
                 FROM sys.databases
                 WHERE Name NOT IN ('master','model','msdb','tempdb','ReportServerTempDB','TESTI')
                 AND state_desc = 'ONLINE'
                 ORDER BY Name


table_schemas = SELECT DISTINCT TABLE_SCHEMA  as schema_table
                FROM INFORMATION_SCHEMA.TABLES

routine_schemas = SELECT DISTINCT ROUTINE_SCHEMA as schema_routine
                  FROM INFORMATION_SCHEMA.ROUTINES

table_names = SELECT TABLE_NAME, TABLE_TYPE
              FROM INFORMATION_SCHEMA.TABLES
              WHERE TABLE_SCHEMA = ?
              ORDER BY TABLE_TYPE, TABLE_NAME

routine_names = SELECT ROUTINE_NAME, ROUTINE_TYPE
                FROM INFORMATION_SCHEMA.ROUTINES
                WHERE ROUTINE_SCHEMA = ?
                ORDER BY ROUTINE_TYPE, ROUTINE_NAME

schema_descriptions = SELECT CAST(value AS VARCHAR(4000)) as description
                      FROM sys.extended_properties
                      WHERE major_id = SCHEMA_ID(?)
                      AND name = 'Description'
                      AND minor_id = 0

object_descriptions = SELECT CAST(value AS VARCHAR(4000)) as description
                      FROM sys.extended_properties
                      WHERE major_id = OBJECT_ID(?)
                      AND name = 'Description'
                      AND minor_id = 0

available_extended_properties = SELECT DISTINCT name
                                FROM sys.extended_properties
                                WHERE major_id = OBJECT_ID(?)
                                AND minor_id <> 0
                                ORDER BY name ASC

; table columns

table_col_ext_prop_value_select_template = ,COALESCE([ext_prop_{0}].value,'') as [{1}]

table_col_ext_prop_joiner_template = LEFT JOIN sys.extended_properties ext_prop_{0}
        ON ext_prop_{0}.major_id = c.object_id
            AND ext_prop_{0}.minor_id = c.column_id
            AND ext_prop_{0}.name = '{1}'

; query partly borrowed and modified from sp_help procedure (from SQLS 2022)
table_col_select_body = begin
        set nocount on
        declare	@dbname	sysname
            ,@no varchar(35), @yes varchar(35)
        select @no = '', @yes = 'YES'
        DECLARE	@objname nvarchar(776)
        set @objname = CONCAT(?,'.',?) 
        declare @objid int
        declare @sysobj_type char(2)
        select @objid = object_id, @sysobj_type = type from sys.all_objects where object_id = object_id(@objname)
        declare @lengthtypes nvarchar(150)
        select @lengthtypes = N'char,varchar,text,nchar,nvarchar,ntext,binary,varbinary,image,'
        declare @precscaletypes nvarchar(150)
        select @precscaletypes = N'tinyint,smallint,decimal,int,bigint,real,money,float,numeric,smallmoney,date,time,datetime2,datetimeoffset,'
        select
            'Column'			= c.name,
            'Type'					= type_name(user_type_id),
            'Length'				= case when charindex(type_name(system_type_id) + ',', @lengthtypes) > 0
                                    then convert(char(5), max_length)
                                    else '     ' end,            
            'Precision'					= case when charindex(type_name(system_type_id) + ',', @precscaletypes) > 0
                                        then convert(char(5),ColumnProperty(c.object_id, c.name, 'precision'))
                                        else '     ' end,
            'Scale'					= case when charindex(type_name(system_type_id) + ',', @precscaletypes) > 0
                                        then convert(char(5),OdbcScale(system_type_id,scale))
                                        else '     ' end,
            'Nullable'				= case when is_nullable = 0 then @no else @yes end,
            CASE WHEN pk.name IS NOT NULL THEN @yes ELSE @no END AS [Primary Key],
            CASE WHEN fk.name IS NOT NULL THEN @yes ELSE @no END AS [Foreign Key]
            -- table_col_ext_prop_value_select_template(s) go here
            {}
        from sys.all_columns c 
        LEFT JOIN sys.index_columns ic 
            ON ic.object_id = c.object_id 
            and ic.column_id = c.column_id 
        LEFT JOIN sys.indexes pk 
            ON ic.object_id = pk.object_id 
            and ic.index_id = pk.index_id
            and pk.is_primary_key = 1
        LEFT JOIN sys.foreign_key_columns fkc 
            ON fkc.parent_column_id = c.column_id 
            AND fkc.parent_object_id = c.object_id
        LEFT JOIN sys.foreign_keys fk
            ON fk.object_id = fkc.constraint_object_id
        -- table_col_ext_prop_joiner_template(s) go here
        {}
        where c.object_id = @objid
    end


; view columns (no PK/FK info when compared to table columns)

view_col_ext_prop_value_select_template = ,COALESCE([ext_prop_{0}].value,'') as [{1}]

view_col_ext_prop_joiner_template = LEFT JOIN sys.extended_properties ext_prop_{0}
        ON ext_prop_{0}.major_id = c.object_id
            AND ext_prop_{0}.minor_id = c.column_id
            AND ext_prop_{0}.name = '{1}'

; query partly borrowed and modified from sp_help procedure (from SQLS 2022)
view_col_select_body = begin
        set nocount on
        declare	@dbname	sysname
            ,@no varchar(35), @yes varchar(35)
        select @no = '', @yes = 'YES'
        DECLARE	@objname nvarchar(776)
        set @objname = CONCAT(?,'.',?) 
        declare @objid int
        declare @sysobj_type char(2)
        select @objid = object_id, @sysobj_type = type from sys.all_objects where object_id = object_id(@objname)
        declare @lengthtypes nvarchar(150)        
        select @lengthtypes = N'char,varchar,text,nchar,nvarchar,ntext,binary,varbinary,image,'
        declare @precscaletypes nvarchar(150)
        select @precscaletypes = N'tinyint,smallint,decimal,int,bigint,real,money,float,numeric,smallmoney,date,time,datetime2,datetimeoffset,'
        select
            'Column'			= c.name,
            'Type'					= type_name(user_type_id),
            'Length'				= case when charindex(type_name(system_type_id) + ',', @lengthtypes) > 0
                                    then convert(char(5), max_length)
                                    else '     ' end,
            'Precision'					= case when charindex(type_name(system_type_id) + ',', @precscaletypes) > 0
                                        then convert(char(5),ColumnProperty(c.object_id, c.name, 'precision'))
                                        else '     ' end,
            'Scale'					= case when charindex(type_name(system_type_id) + ',', @precscaletypes) > 0
                                        then convert(char(5),OdbcScale(system_type_id,scale))
                                        else '     ' end,
            'Nullable'				= case when is_nullable = 0 then @no else @yes end
            -- view_col_ext_prop_inclusion_template(s) go here
            {}
        FROM sys.all_columns c 
        -- view_col_from_template(s) go here
        {}
        WHERE c.object_id = @objid
    END

; end view columns

routine_parameters = SELECT
                        name as [Parameter],
                        type_name(user_type_id) as [Type],
                        COALESCE(max_length, '') as [Length],
                        COALESCE(CAST(CASE
                            WHEN type_name(system_type_id) = 'uniqueidentifier' THEN precision
                            ELSE OdbcPrec(system_type_id, max_length, precision)
                        END AS VARCHAR(10)), '') as [Precision],
                        COALESCE(CAST(OdbcScale(system_type_id, scale) AS VARCHAR(10)), '') as [Scale],
                        COALESCE(CASE
                            WHEN is_output = 1 THEN 'return'
                            ELSE CAST(parameter_id as VARCHAR(10))
                        END, '') as [Parameter Order]
                    FROM sys.parameters
                    WHERE object_id = object_id(?)

object_indexes = SELECT
                 	ind.name	as [Index Name],
                 	ind.type_desc	as [Index Type],
                 	CASE
                        WHEN ind.is_unique = 1 THEN 'Yes'
                        ELSE 'No'
                    END	as [Is Unique]
                 FROM INFORMATION_SCHEMA.TABLES tbl
                 JOIN sys.indexes ind
                 	ON ind.object_id = OBJECT_ID('' + tbl.TABLE_SCHEMA + '.' + tbl.TABLE_NAME)
                 	AND ind.is_primary_key = 0	-- do not include primary keys
                 WHERE ind.type <> 0
					 AND tbl.TABLE_SCHEMA = ?
                     AND tbl.TABLE_NAME = ?

index_columns = SELECT col.name AS [column_name],
                    CASE
                        WHEN indc.is_descending_key = 0 THEN '(ascending)'
                        ELSE '(descending)'
                    END		AS [column_sort_order]
                FROM sys.indexes ind
                    JOIN sys.index_columns indc
                        ON ind.index_id = indc.index_id
                        AND ind.object_id = indc.object_id
                    JOIN sys.columns col
                        ON indc.object_id = col.object_id
                        AND indc.column_id = col.column_id
                    JOIN sys.tables t
                        ON ind.object_id = t.object_id
                    JOIN sys.schemas s
                        ON t.schema_id = s.schema_id
                WHERE s.name = ?
                    AND t.name = ?
                    AND ind.name = ?
                ORDER BY indc.key_ordinal ASC

object_dependencies =   SET NOCOUNT ON
                        DECLARE @komp TABLE(nimi varchar(255), database_name varchar(255), schema_name varchar(255), object_name varchar(255))
                        DECLARE @dep TABLE(referenced_database_name varchar(255), referenced_schema_name varchar(255), referenced_entity_name varchar(255))
                        DECLARE @target TABLE(nimi varchar(255), database_name varchar(255), schema_name varchar(255), object_name varchar(255))
                        DECLARE @links TABLE(source varchar(255), target varchar(255))

                        INSERT INTO @komp (nimi, database_name, schema_name, object_name)
                        SELECT
                            s.name + '.' + o.name as nimi,
                            '{0}' as database_name,
                            s.name as schema_name,
                            o.name as object_name
                        FROM [{0}].sys.objects o
                        JOIN [{0}].sys.schemas s
                            ON o.schema_id = s.schema_id
                        WHERE is_ms_shipped = 0 AND o.type in ('U','V','P','FN','IF','TF','PC','TR')

                        WHILE EXISTS (SELECT 1 FROM @komp)
                        BEGIN

                            DELETE FROM @target

                            INSERT INTO @target
                            SELECT TOP(1) nimi, database_name, schema_name, object_name
                            FROM @komp

                            DELETE FROM @komp
                            WHERE nimi = (SELECT nimi from @target)

                            BEGIN TRY
                                INSERT INTO @links
                                SELECT
                                    ISNULL(dep.referenced_database_name, '{0}') + '.' + ISNULL(dep.referenced_schema_name, 'dbo') + '.' + referenced_entity_name as [source]
                                    ,komp.database_name + '.' + komp.schema_name + '.' + komp.object_name as [target]
                                FROM @target komp
                                CROSS APPLY [{0}].sys.dm_sql_referenced_entities (komp.nimi, 'OBJECT') dep
                                -- right side of the AND drops temp tables from the list
                                WHERE referenced_minor_name IS NULL AND (referenced_schema_name IS NOT NULL AND referenced_id IS NOT NULL)
                            END TRY
                            BEGIN CATCH
                            END CATCH

                        END

                        SELECT
                        source,
                        target
                        FROM @links
