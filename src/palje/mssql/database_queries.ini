# Palje - Document MSSQL databases to Confluence wiki
#
# Copyright 2021 ALM Partners Oy
# SPDX-License-Identifier: Apache-2.0

[Queries]
database_names = SELECT Name as database_name
                 FROM sys.databases
                 WHERE Name NOT IN ('master','model','msdb','tempdb','ReportServerTempDB','TESTI')
                 AND state_desc = 'ONLINE'
                 ORDER BY Name


table_schemas = SELECT DISTINCT TABLE_SCHEMA  as schema_table
                FROM INFORMATION_SCHEMA.TABLES

routine_schemas = SELECT DISTINCT ROUTINE_SCHEMA as schema_routine
                  FROM INFORMATION_SCHEMA.ROUTINES

table_names = SELECT TABLE_NAME, TABLE_TYPE
              FROM INFORMATION_SCHEMA.TABLES
              WHERE TABLE_SCHEMA = ?
              ORDER BY TABLE_TYPE, TABLE_NAME

routine_names = SELECT ROUTINE_NAME, ROUTINE_TYPE
                FROM INFORMATION_SCHEMA.ROUTINES
                WHERE ROUTINE_SCHEMA = ?
                ORDER BY ROUTINE_TYPE, ROUTINE_NAME

schema_descriptions = SELECT CAST(value AS VARCHAR(4000)) as description
                      FROM sys.extended_properties
                      WHERE major_id = SCHEMA_ID(?)
                      AND name = 'Description'
                      AND minor_id = 0

object_descriptions = SELECT CAST(value AS VARCHAR(4000)) as description
                      FROM sys.extended_properties
                      WHERE major_id = OBJECT_ID(?)
                      AND name = 'Description'
                      AND minor_id = 0

available_extended_properties = SELECT DISTINCT name
                                FROM sys.extended_properties
                                WHERE major_id = OBJECT_ID(?)
                                AND minor_id <> 0
                                ORDER BY name ASC

; table columns

table_col_ext_prop_value_select_template = ,COALESCE([ext_prop_{0}].value,'') as [{1}]

table_col_ext_prop_joiner_template = LEFT JOIN sys.extended_properties ext_prop_{0}
        ON ext_prop_{0}.major_id = col.object_id
            AND ext_prop_{0}.minor_id = col.column_id
            AND ext_prop_{0}.name = '{1}'

; Note for both table_col_select_body AND view_col_select_body
;
; FIXME: assuming NCHAR and NVARCHAR max_length (number of bytes) is twice the
; CHARACTER_LENGTH (number of characters). This is usually (but not always) true.
;
; FIXME: assuming type sysname = nvarchar(128). This is not true for older SQLS's.
;
; All previous data would be readily available in INFORMATION_SCHEMA.COLUMNS but
; for performance and complexity reasons we are using sys.columns here for now.
;
; If you are planning to fix these, see if sp_help and/or datalength() are of any use.
;

table_col_select_body = SELECT
                            col.name					AS [Column]
                            ,CASE WHEN typ.name = 'sysname' THEN 'nvarchar' ELSE typ.name END AS [Type]
                            ,CASE
                                WHEN typ.name = 'varchar' AND col.max_length = -1 THEN 'max'
                                WHEN (typ.name = 'varchar' AND col.max_length <> -1) OR typ.name = 'char' THEN CAST(col.max_length as varchar(10))
                                WHEN typ.name = 'nvarchar' OR typ.name = 'nchar' THEN CAST(col.max_length / 2 as varchar(10))
                                WHEN typ.name = 'sysname' THEN '128'
                                ELSE ''
                            END						AS [Length]
                            ,CASE
                                WHEN col.precision <> 0 THEN CAST(col.precision as VARCHAR(10)) ELSE ''
                            END	AS [Precision]
                            ,CASE
                                WHEN col.precision <> 0 THEN CAST(col.scale as VARCHAR(10)) ELSE ''
                            END	AS [Scale]
                            ,CASE
                                WHEN col.is_nullable = 1 THEN 'YES'
                                ELSE 'NO'
                            END						AS [Nullable]
                            ,CASE WHEN pk.name IS NOT NULL THEN 'x' ELSE '' END AS [Primary Key]
                            ,CASE WHEN fk.name IS NOT NULL THEN 'x' ELSE '' END AS [Foreign Key]
                            -- table_col_ext_prop_value_select_template(s) go here
                            {}
                        FROM sys.objects t
                            JOIN sys.columns col
                                ON t.object_id = col.object_id
                            JOIN sys.types typ
                                ON typ.user_type_id = col.user_type_id
                            JOIN sys.schemas s
                                ON t.schema_id = s.schema_id
                            LEFT JOIN sys.index_columns ic
                                ON ic.object_id = col.object_id
                                and ic.column_id = col.column_id
                            LEFT JOIN sys.indexes pk
                                ON ic.object_id = pk.object_id
                                and ic.index_id = pk.index_id
                                and pk.is_primary_key = 1
                            LEFT JOIN sys.foreign_key_columns fkc
                                ON fkc.parent_column_id = col.column_id
                                AND fkc.parent_object_id = col.object_id
                            LEFT JOIN sys.foreign_keys fk
                                ON fk.object_id = fkc.constraint_object_id
                            -- table_col_ext_prop_joiner_template(s) go here
                            {}
                        WHERE s.name = ?
                            AND t.name = ?

; view columns

view_col_ext_prop_value_select_template = ,COALESCE([ext_prop_{0}].value,'') as [{1}]

view_col_ext_prop_joiner_template = LEFT JOIN sys.extended_properties ext_prop_{0}
        ON ext_prop_{0}.major_id = col.object_id
            AND ext_prop_{0}.minor_id = col.column_id
            AND ext_prop_{0}.name = '{1}'

;
; FIXME: see note above
;
view_col_select_body = SELECT
                col.name					AS [Column]
                ,CASE WHEN typ.name = 'sysname' THEN 'nvarchar' ELSE typ.name END AS [Type]
                ,CASE
                    WHEN typ.name = 'varchar' AND col.max_length = -1 THEN 'max'
                    WHEN (typ.name = 'varchar' AND col.max_length <> -1) OR typ.name = 'char' THEN CAST(col.max_length as varchar(10))
                    WHEN typ.name = 'nvarchar' OR typ.name = 'nchar' THEN CAST(col.max_length / 2 as varchar(10))
                    WHEN typ.name = 'sysname' THEN '128'
                    ELSE ''
                END						AS [Length]
                ,CASE
                    WHEN col.precision <> 0 THEN CAST(col.precision as VARCHAR(10)) ELSE ''
                END	AS [Precision]
                ,CASE
                    WHEN col.precision <> 0 THEN CAST(col.scale as VARCHAR(10)) ELSE ''
                END	AS [Scale]
                ,CASE
                    WHEN col.is_nullable = 1 THEN 'YES'
                    ELSE 'NO'
                END						AS [Nullable]
                    -- view_col_ext_prop_inclusion_template(s) go here
                    {}
                FROM sys.objects t
                    JOIN sys.columns col
                        ON t.object_id = col.object_id
                    JOIN sys.types typ
                        ON typ.user_type_id = col.user_type_id
                    JOIN sys.schemas sch
                        ON t.schema_id = sch.schema_id
                    -- view_col_from_template(s) go here
                    {}
                WHERE sch.name = ?
                    AND t.name = ?

; end view columns


routine_parameters = SELECT
                        name as [Parameter],
                        type_name(user_type_id) as [Type],
                        COALESCE(max_length, '') as [Length],
                        COALESCE(CAST(CASE
                            WHEN type_name(system_type_id) = 'uniqueidentifier' THEN precision
                            ELSE OdbcPrec(system_type_id, max_length, precision)
                        END AS VARCHAR(10)), '') as [Precision],
                        COALESCE(CAST(OdbcScale(system_type_id, scale) AS VARCHAR(10)), '') as [Scale],
                        COALESCE(CASE
                            WHEN is_output = 1 THEN 'return'
                            ELSE CAST(parameter_id as VARCHAR(10))
                        END, '') as [Parameter Order]
                    FROM sys.parameters
                    WHERE object_id = object_id(?)

object_indexes = SELECT
                 	ind.name	as [Index Name],
                 	ind.type_desc	as [Index Type],
                 	CASE
                        WHEN ind.is_unique = 1 THEN 'Yes'
                        ELSE 'No'
                    END	as [Is Unique]
                 FROM INFORMATION_SCHEMA.TABLES tbl
                 JOIN sys.indexes ind
                 	ON ind.object_id = OBJECT_ID('' + tbl.TABLE_SCHEMA + '.' + tbl.TABLE_NAME)
                 	AND ind.is_primary_key = 0	-- do not include primary keys
                 WHERE ind.type <> 0
					 AND tbl.TABLE_SCHEMA = ?
                     AND tbl.TABLE_NAME = ?

index_columns = SELECT col.name AS [column_name],
                    CASE
                        WHEN indc.is_descending_key = 0 THEN '(ascending)'
                        ELSE '(descending)'
                    END		AS [column_sort_order]
                FROM sys.indexes ind
                    JOIN sys.index_columns indc
                        ON ind.index_id = indc.index_id
                        AND ind.object_id = indc.object_id
                    JOIN sys.columns col
                        ON indc.object_id = col.object_id
                        AND indc.column_id = col.column_id
                    JOIN sys.tables t
                        ON ind.object_id = t.object_id
                    JOIN sys.schemas s
                        ON t.schema_id = s.schema_id
                WHERE s.name = ?
                    AND t.name = ?
                    AND ind.name = ?
                ORDER BY indc.key_ordinal ASC

object_dependencies =   SET NOCOUNT ON
                        -- Variables
                        DECLARE @komp TABLE(nimi varchar(255), database_name varchar(255), schema_name varchar(255), object_name varchar(255))
                        DECLARE @dep TABLE(referenced_database_name varchar(255), referenced_schema_name varchar(255), referenced_entity_name varchar(255))
                        DECLARE @target TABLE(nimi varchar(255), database_name varchar(255), schema_name varchar(255), object_name varchar(255))
                        DECLARE @links TABLE(source varchar(255), target varchar(255))

                        -- Insert target data to @komp
                        INSERT INTO @komp (nimi, database_name, schema_name, object_name)
                        SELECT
                            s.name + '.' + o.name as nimi,
                            '{0}' as database_name,
                            s.name as schema_name,
                            o.name as object_name
                        FROM [{0}].sys.objects o
                        JOIN [{0}].sys.schemas s
                            ON o.schema_id = s.schema_id
                        WHERE is_ms_shipped = 0 AND o.type in ('U','V','P','FN','IF','TF','PC','TR')

                        -- Loop through targets in @komp
                        WHILE EXISTS (SELECT 1 FROM @komp)
                        BEGIN

                            DELETE FROM @target

                            INSERT INTO @target
                            SELECT TOP(1) nimi, database_name, schema_name, object_name
                            FROM @komp

                            DELETE FROM @komp
                            WHERE nimi = (SELECT nimi from @target)

                            BEGIN TRY
                                INSERT INTO @links
                                SELECT
                                    ISNULL(dep.referenced_database_name, '{0}') + '.' + ISNULL(dep.referenced_schema_name, 'dbo') + '.' + referenced_entity_name as [source]
                                    ,komp.database_name + '.' + komp.schema_name + '.' + komp.object_name as [target]
                                FROM @target komp
                                CROSS APPLY [{0}].sys.dm_sql_referenced_entities (komp.nimi, 'OBJECT') dep
                                WHERE referenced_minor_name IS NULL
                            END TRY
                            BEGIN CATCH
                            END CATCH

                        END

                        SELECT
                        source,
                        target
                        FROM @links
