# Palje - Document MSSQL databases to Confluence wiki
#
# Copyright 2021 ALM Partners Oy
# SPDX-License-Identifier: Apache-2.0

[Queries]
database_names = SELECT Name as database_name
                 FROM sys.databases
                 WHERE Name NOT IN ('master','model','msdb','tempdb','ReportServerTempDB','TESTI')
                 AND state_desc = 'ONLINE'
                 ORDER BY Name


table_schemas = SELECT DISTINCT TABLE_SCHEMA  as schema_table
                FROM INFORMATION_SCHEMA.TABLES

routine_schemas = SELECT DISTINCT ROUTINE_SCHEMA as schema_routine
                  FROM INFORMATION_SCHEMA.ROUTINES

table_names = SELECT TABLE_NAME, TABLE_TYPE
              FROM INFORMATION_SCHEMA.TABLES
              WHERE TABLE_SCHEMA = ?
              ORDER BY TABLE_TYPE, TABLE_NAME

routine_names = SELECT ROUTINE_NAME, ROUTINE_TYPE
                FROM INFORMATION_SCHEMA.ROUTINES
                WHERE ROUTINE_SCHEMA = ?
                ORDER BY ROUTINE_TYPE, ROUTINE_NAME

schema_descriptions = SELECT CAST(value AS VARCHAR(4000)) as description
                      FROM sys.extended_properties
                      WHERE major_id = SCHEMA_ID(?)
                      AND name = 'Description'
                      AND minor_id = 0

object_descriptions = SELECT CAST(value AS VARCHAR(4000)) as description
                      FROM sys.extended_properties
                      WHERE major_id = OBJECT_ID(?)
                      AND name = 'Description'
                      AND minor_id = 0

available_extended_properties = SELECT DISTINCT name
                                FROM sys.extended_properties
                                WHERE major_id = OBJECT_ID(?)
                                AND minor_id <> 0
                                ORDER BY name ASC

select_template = ,COALESCE(CAST([col{0}].[{0}] as varchar(8000)), '') as [{0}]

from_template = LEFT JOIN (
					SELECT sc.object_id, sc.column_id, sc.name, colProp.[value] AS [{0}]
                	FROM sys.columns sc 
                	JOIN sys.extended_properties colProp 
                		ON colProp.major_id = sc.object_id 
                			AND colProp.minor_id = sc.column_id 
                			AND colProp.name = '{0}'
					) [col{0}]
                	ON [col{0}].object_id = object_id('' + tbl.TABLE_SCHEMA + '.' + tbl.TABLE_NAME) 
						AND [col{0}].name = col.COLUMN_NAME

table_columns = SELECT 
                    col.[COLUMN_NAME]												as [Column],
                    col.[DATA_TYPE]													as [Type],
                    CASE 
						WHEN col.[DATA_TYPE] = 'varchar' AND col.[CHARACTER_MAXIMUM_LENGTH] = -1 THEN 'max' 
                        ELSE COALESCE(CAST(col.[CHARACTER_MAXIMUM_LENGTH] as varchar(10)), '') 
                    END																as [Length],
                    COALESCE(CAST(col.[NUMERIC_PRECISION] as varchar(10)), '')		as [Precision],
                    COALESCE(CAST(col.[NUMERIC_SCALE] as varchar(10)), '')			as [Scale],
                    CAST(col.[IS_NULLABLE] as varchar(10))							as [Nullable],
                    CASE WHEN pk.CONSTRAINT_TYPE IS NOT NULL THEN 'x' ELSE '' END	as [Primary Key],
                    CASE WHEN fk.CONSTRAINT_TYPE IS NOT NULL THEN 'x' ELSE '' END	as [Foreign Key]
                    {}
                FROM INFORMATION_SCHEMA.TABLES tbl 
                INNER JOIN INFORMATION_SCHEMA.COLUMNS col 
                	ON col.TABLE_NAME = tbl.TABLE_NAME
						AND tbl.TABLE_CATALOG = col.TABLE_CATALOG
						AND tbl.TABLE_SCHEMA = col.TABLE_SCHEMA
				LEFT JOIN (
                	SELECT cu.TABLE_CATALOG,cu.TABLE_SCHEMA ,cu.TABLE_NAME ,cu.COLUMN_NAME, tc.CONSTRAINT_NAME, tc.CONSTRAINT_TYPE
                	FROM INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE cu
                	JOIN INFORMATION_SCHEMA.TABLE_CONSTRAINTS tc   
                		ON cu.CONSTRAINT_CATALOG = tc.CONSTRAINT_CATALOG
							AND cu.CONSTRAINT_SCHEMA = tc.CONSTRAINT_SCHEMA
							AND cu.CONSTRAINT_NAME = tc.CONSTRAINT_NAME 
                	WHERE tc.CONSTRAINT_TYPE = 'PRIMARY KEY' 
                  ) pk 
                  	ON pk.TABLE_CATALOG = tbl.TABLE_CATALOG AND pk.TABLE_SCHEMA = tbl.TABLE_SCHEMA 
                	   AND pk.TABLE_NAME = tbl.TABLE_NAME AND pk.COLUMN_NAME = col.COLUMN_NAME 
				LEFT JOIN (
                	SELECT cu.TABLE_CATALOG,cu.TABLE_SCHEMA ,cu.TABLE_NAME ,cu.COLUMN_NAME, tc.CONSTRAINT_NAME, tc.CONSTRAINT_TYPE
                	FROM INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE cu
                	JOIN INFORMATION_SCHEMA.TABLE_CONSTRAINTS tc   
                		ON cu.CONSTRAINT_CATALOG = tc.CONSTRAINT_CATALOG
							AND cu.CONSTRAINT_SCHEMA = tc.CONSTRAINT_SCHEMA
							AND cu.CONSTRAINT_NAME = tc.CONSTRAINT_NAME 
                	WHERE tc.CONSTRAINT_TYPE = 'FOREIGN KEY'
                  ) fk 
                	ON fk.TABLE_CATALOG = tbl.TABLE_CATALOG AND fk.TABLE_SCHEMA = tbl.TABLE_SCHEMA 
                	   AND fk.TABLE_NAME = tbl.TABLE_NAME AND fk.COLUMN_NAME = col.COLUMN_NAME
                {}
                WHERE col.TABLE_CATALOG = ?
                	AND col.TABLE_SCHEMA = ?
                	AND col.TABLE_NAME = ?

view_columns = SELECT 
                    col.[COLUMN_NAME]												as [Column],
                    col.[DATA_TYPE]													as [Type],
                    CASE 
						WHEN col.[DATA_TYPE] = 'varchar' AND col.[CHARACTER_MAXIMUM_LENGTH] = -1 THEN 'max' 
                        ELSE COALESCE(CAST(col.[CHARACTER_MAXIMUM_LENGTH] as varchar(10)), '') 
                    END																as [Length],
                    COALESCE(CAST(col.[NUMERIC_PRECISION] as varchar(10)), '')		as [Precision],
                    COALESCE(CAST(col.[NUMERIC_SCALE] as varchar(10)), '')			as [Scale],
                    CAST(col.[IS_NULLABLE] as varchar(10))							as [Nullable]
                    {}
               FROM INFORMATION_SCHEMA.TABLES tbl
               INNER JOIN INFORMATION_SCHEMA.COLUMNS col 
                    ON col.TABLE_NAME = tbl.TABLE_NAME
                    AND tbl.TABLE_CATALOG = col.TABLE_CATALOG
                    AND tbl.TABLE_SCHEMA = col.TABLE_SCHEMA
               {}
               WHERE col.TABLE_CATALOG = ?
               	AND col.TABLE_SCHEMA = ?
               	AND col.TABLE_NAME = ?

routine_parameters = SELECT
                        name as [Parameter],
                        type_name(user_type_id) as [Type],
                        COALESCE(max_length, '') as [Length],
                        COALESCE(CAST(CASE
                            WHEN type_name(system_type_id) = 'uniqueidentifier' THEN precision 
                            ELSE OdbcPrec(system_type_id, max_length, precision)
                        END AS VARCHAR(10)), '') as [Precision],
                        COALESCE(CAST(OdbcScale(system_type_id, scale) AS VARCHAR(10)), '') as [Scale],
                        COALESCE(CASE
                            WHEN is_output = 1 THEN 'return'
                            ELSE CAST(parameter_id as VARCHAR(10))
                        END, '') as [Parameter Order]
                    FROM sys.parameters
                    WHERE object_id = object_id(?)

object_indexes = SELECT
                 	ind.name	as [Index Name],
                 	ind.type_desc	as [Index Type],
                 	CASE
                        WHEN ind.is_unique = 1 THEN 'Yes'
                        ELSE 'No'
                    END	as [Is Unique]
                 FROM INFORMATION_SCHEMA.TABLES tbl 
                 JOIN sys.indexes ind
                 	ON ind.object_id = OBJECT_ID('' + tbl.TABLE_SCHEMA + '.' + tbl.TABLE_NAME)
                 	AND ind.is_primary_key = 0	-- do not include primary keys
                 WHERE ind.type <> 0
					 AND tbl.TABLE_SCHEMA = ?
                     AND tbl.TABLE_NAME = ?

index_columns = SELECT
                	col.COLUMN_NAME	AS [column_name],
                	CASE
                        WHEN indc.is_descending_key = 0 THEN '(ascending)'
                        ELSE '(descending)'
                    END		AS [column_sort_order]
                FROM INFORMATION_SCHEMA.COLUMNS col
                JOIN sys.indexes ind
                	ON ind.object_id = OBJECT_ID('' + col.TABLE_SCHEMA + '.' + col.TABLE_NAME)
                JOIN sys.index_columns indc
                	ON ind.index_id = indc.index_id
                		AND ind.object_id = indc.object_id
                		AND indc.column_id = col.ORDINAL_POSITION
                WHERE col.TABLE_SCHEMA = ?
                    AND col.TABLE_NAME = ?
                	AND ind.name = ?
                ORDER BY indc.key_ordinal ASC

object_dependencies =   SET NOCOUNT ON
                        -- Variables
                        DECLARE @komp TABLE(nimi varchar(255), database_name varchar(255), schema_name varchar(255), object_name varchar(255))
                        DECLARE @dep TABLE(referenced_database_name varchar(255), referenced_schema_name varchar(255), referenced_entity_name varchar(255))
                        DECLARE @target TABLE(nimi varchar(255), database_name varchar(255), schema_name varchar(255), object_name varchar(255))
                        DECLARE @links TABLE(source varchar(255), target varchar(255))

                        -- Insert target data to @komp
                        INSERT INTO @komp (nimi, database_name, schema_name, object_name)
                        SELECT 
                            s.name + '.' + o.name as nimi,
                            '{0}' as database_name,
                            s.name as schema_name,
                            o.name as object_name
                        FROM [{0}].sys.objects o
                        JOIN [{0}].sys.schemas s 
                            ON o.schema_id = s.schema_id
                        WHERE is_ms_shipped = 0 AND o.type in ('U','V','P','FN','IF','TF','PC','TR')

                        -- Loop through targets in @komp
                        WHILE EXISTS (SELECT 1 FROM @komp)
                        BEGIN

                            DELETE FROM @target

                            INSERT INTO @target
                            SELECT TOP(1) nimi, database_name, schema_name, object_name
                            FROM @komp

                            DELETE FROM @komp
                            WHERE nimi = (SELECT nimi from @target)

                            BEGIN TRY
                                INSERT INTO @links
                                SELECT
                                    ISNULL(dep.referenced_database_name, '{0}') + '.' + ISNULL(dep.referenced_schema_name, 'dbo') + '.' + referenced_entity_name as [source]
                                    ,komp.database_name + '.' + komp.schema_name + '.' + komp.object_name as [target]
                                FROM @target komp
                                CROSS APPLY [{0}].sys.dm_sql_referenced_entities (komp.nimi, 'OBJECT') dep
                                WHERE referenced_minor_name IS NULL
                            END TRY
                            BEGIN CATCH
                            END CATCH

                        END

                        SELECT
                        source,
                        target
                        FROM @links
                        WHERE target = ? OR source = ?
